//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.WorkflowSoap")]
    public interface WorkflowSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetWorkFlowList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetWorkFlowList(System.AsyncCallback callback, object asyncState);
        
        string EndGetWorkFlowList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetWorkflowDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetWorkflowDocument(string workflowId, System.AsyncCallback callback, object asyncState);
        
        string EndGetWorkflowDocument(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DeleteWorkflow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginDeleteWorkflow(string workflowId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteWorkflow(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UpdateWorkflow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginUpdateWorkflow(string workflowDocument, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateWorkflow(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetPostList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetPostList(System.AsyncCallback callback, object asyncState);
        
        string EndGetPostList(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WorkflowSoapChannel : Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkFlowListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkFlowListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkflowDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkflowDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPostListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPostListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkflowSoapClient : System.ServiceModel.ClientBase<Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap>, Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap {
        
        private BeginOperationDelegate onBeginGetWorkFlowListDelegate;
        
        private EndOperationDelegate onEndGetWorkFlowListDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkFlowListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkflowDocumentDelegate;
        
        private EndOperationDelegate onEndGetWorkflowDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkflowDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteWorkflowDelegate;
        
        private EndOperationDelegate onEndDeleteWorkflowDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteWorkflowCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateWorkflowDelegate;
        
        private EndOperationDelegate onEndUpdateWorkflowDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateWorkflowCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPostListDelegate;
        
        private EndOperationDelegate onEndGetPostListDelegate;
        
        private System.Threading.SendOrPostCallback onGetPostListCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WorkflowSoapClient() {
        }
        
        public WorkflowSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WorkflowSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkflowSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkflowSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetWorkFlowListCompletedEventArgs> GetWorkFlowListCompleted;
        
        public event System.EventHandler<GetWorkflowDocumentCompletedEventArgs> GetWorkflowDocumentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteWorkflowCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateWorkflowCompleted;
        
        public event System.EventHandler<GetPostListCompletedEventArgs> GetPostListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap.BeginGetWorkFlowList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkFlowList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap.EndGetWorkFlowList(System.IAsyncResult result) {
            return base.Channel.EndGetWorkFlowList(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkFlowList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap)(this)).BeginGetWorkFlowList(callback, asyncState);
        }
        
        private object[] OnEndGetWorkFlowList(System.IAsyncResult result) {
            string retVal = ((Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap)(this)).EndGetWorkFlowList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkFlowListCompleted(object state) {
            if ((this.GetWorkFlowListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkFlowListCompleted(this, new GetWorkFlowListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkFlowListAsync() {
            this.GetWorkFlowListAsync(null);
        }
        
        public void GetWorkFlowListAsync(object userState) {
            if ((this.onBeginGetWorkFlowListDelegate == null)) {
                this.onBeginGetWorkFlowListDelegate = new BeginOperationDelegate(this.OnBeginGetWorkFlowList);
            }
            if ((this.onEndGetWorkFlowListDelegate == null)) {
                this.onEndGetWorkFlowListDelegate = new EndOperationDelegate(this.OnEndGetWorkFlowList);
            }
            if ((this.onGetWorkFlowListCompletedDelegate == null)) {
                this.onGetWorkFlowListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkFlowListCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkFlowListDelegate, null, this.onEndGetWorkFlowListDelegate, this.onGetWorkFlowListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap.BeginGetWorkflowDocument(string workflowId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkflowDocument(workflowId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap.EndGetWorkflowDocument(System.IAsyncResult result) {
            return base.Channel.EndGetWorkflowDocument(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkflowDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string workflowId = ((string)(inValues[0]));
            return ((Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap)(this)).BeginGetWorkflowDocument(workflowId, callback, asyncState);
        }
        
        private object[] OnEndGetWorkflowDocument(System.IAsyncResult result) {
            string retVal = ((Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap)(this)).EndGetWorkflowDocument(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkflowDocumentCompleted(object state) {
            if ((this.GetWorkflowDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkflowDocumentCompleted(this, new GetWorkflowDocumentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkflowDocumentAsync(string workflowId) {
            this.GetWorkflowDocumentAsync(workflowId, null);
        }
        
        public void GetWorkflowDocumentAsync(string workflowId, object userState) {
            if ((this.onBeginGetWorkflowDocumentDelegate == null)) {
                this.onBeginGetWorkflowDocumentDelegate = new BeginOperationDelegate(this.OnBeginGetWorkflowDocument);
            }
            if ((this.onEndGetWorkflowDocumentDelegate == null)) {
                this.onEndGetWorkflowDocumentDelegate = new EndOperationDelegate(this.OnEndGetWorkflowDocument);
            }
            if ((this.onGetWorkflowDocumentCompletedDelegate == null)) {
                this.onGetWorkflowDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkflowDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkflowDocumentDelegate, new object[] {
                        workflowId}, this.onEndGetWorkflowDocumentDelegate, this.onGetWorkflowDocumentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap.BeginDeleteWorkflow(string workflowId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteWorkflow(workflowId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap.EndDeleteWorkflow(System.IAsyncResult result) {
            base.Channel.EndDeleteWorkflow(result);
        }
        
        private System.IAsyncResult OnBeginDeleteWorkflow(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string workflowId = ((string)(inValues[0]));
            return ((Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap)(this)).BeginDeleteWorkflow(workflowId, callback, asyncState);
        }
        
        private object[] OnEndDeleteWorkflow(System.IAsyncResult result) {
            ((Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap)(this)).EndDeleteWorkflow(result);
            return null;
        }
        
        private void OnDeleteWorkflowCompleted(object state) {
            if ((this.DeleteWorkflowCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteWorkflowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteWorkflowAsync(string workflowId) {
            this.DeleteWorkflowAsync(workflowId, null);
        }
        
        public void DeleteWorkflowAsync(string workflowId, object userState) {
            if ((this.onBeginDeleteWorkflowDelegate == null)) {
                this.onBeginDeleteWorkflowDelegate = new BeginOperationDelegate(this.OnBeginDeleteWorkflow);
            }
            if ((this.onEndDeleteWorkflowDelegate == null)) {
                this.onEndDeleteWorkflowDelegate = new EndOperationDelegate(this.OnEndDeleteWorkflow);
            }
            if ((this.onDeleteWorkflowCompletedDelegate == null)) {
                this.onDeleteWorkflowCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteWorkflowCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteWorkflowDelegate, new object[] {
                        workflowId}, this.onEndDeleteWorkflowDelegate, this.onDeleteWorkflowCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap.BeginUpdateWorkflow(string workflowDocument, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateWorkflow(workflowDocument, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap.EndUpdateWorkflow(System.IAsyncResult result) {
            base.Channel.EndUpdateWorkflow(result);
        }
        
        private System.IAsyncResult OnBeginUpdateWorkflow(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string workflowDocument = ((string)(inValues[0]));
            return ((Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap)(this)).BeginUpdateWorkflow(workflowDocument, callback, asyncState);
        }
        
        private object[] OnEndUpdateWorkflow(System.IAsyncResult result) {
            ((Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap)(this)).EndUpdateWorkflow(result);
            return null;
        }
        
        private void OnUpdateWorkflowCompleted(object state) {
            if ((this.UpdateWorkflowCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateWorkflowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateWorkflowAsync(string workflowDocument) {
            this.UpdateWorkflowAsync(workflowDocument, null);
        }
        
        public void UpdateWorkflowAsync(string workflowDocument, object userState) {
            if ((this.onBeginUpdateWorkflowDelegate == null)) {
                this.onBeginUpdateWorkflowDelegate = new BeginOperationDelegate(this.OnBeginUpdateWorkflow);
            }
            if ((this.onEndUpdateWorkflowDelegate == null)) {
                this.onEndUpdateWorkflowDelegate = new EndOperationDelegate(this.OnEndUpdateWorkflow);
            }
            if ((this.onUpdateWorkflowCompletedDelegate == null)) {
                this.onUpdateWorkflowCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateWorkflowCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateWorkflowDelegate, new object[] {
                        workflowDocument}, this.onEndUpdateWorkflowDelegate, this.onUpdateWorkflowCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap.BeginGetPostList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPostList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap.EndGetPostList(System.IAsyncResult result) {
            return base.Channel.EndGetPostList(result);
        }
        
        private System.IAsyncResult OnBeginGetPostList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap)(this)).BeginGetPostList(callback, asyncState);
        }
        
        private object[] OnEndGetPostList(System.IAsyncResult result) {
            string retVal = ((Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap)(this)).EndGetPostList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPostListCompleted(object state) {
            if ((this.GetPostListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPostListCompleted(this, new GetPostListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPostListAsync() {
            this.GetPostListAsync(null);
        }
        
        public void GetPostListAsync(object userState) {
            if ((this.onBeginGetPostListDelegate == null)) {
                this.onBeginGetPostListDelegate = new BeginOperationDelegate(this.OnBeginGetPostList);
            }
            if ((this.onEndGetPostListDelegate == null)) {
                this.onEndGetPostListDelegate = new EndOperationDelegate(this.OnEndGetPostList);
            }
            if ((this.onGetPostListCompletedDelegate == null)) {
                this.onGetPostListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPostListCompleted);
            }
            base.InvokeAsync(this.onBeginGetPostListDelegate, null, this.onEndGetPostListDelegate, this.onGetPostListCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap CreateChannel() {
            return new WorkflowSoapClientChannel(this);
        }
        
        private class WorkflowSoapClientChannel : ChannelBase<Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap>, Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap {
            
            public WorkflowSoapClientChannel(System.ServiceModel.ClientBase<Shareidea.Web.UI.Control.Workflow.Designer.ServiceReference.WorkflowSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetWorkFlowList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetWorkFlowList", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetWorkFlowList(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetWorkFlowList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkflowDocument(string workflowId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = workflowId;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkflowDocument", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetWorkflowDocument(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetWorkflowDocument", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteWorkflow(string workflowId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = workflowId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteWorkflow", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteWorkflow(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteWorkflow", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateWorkflow(string workflowDocument, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = workflowDocument;
                System.IAsyncResult _result = base.BeginInvoke("UpdateWorkflow", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateWorkflow(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateWorkflow", _args, result);
            }
            
            public System.IAsyncResult BeginGetPostList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetPostList", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetPostList(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetPostList", _args, result)));
                return _result;
            }
        }
    }
}
