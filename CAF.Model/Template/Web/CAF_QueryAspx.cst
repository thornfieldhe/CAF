<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a very simple business object." Debug="False"%>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." Optional="True" %>
<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Context" Description="Table that the object is based on." Optional="True"%>
<%@ Property Name="ClassNamespace" Type="System.String" Category="Options" Default="CAF" Description="" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Map Name="DbDataReader" Src="DbType-DataReaderMethod" Description="DbType to DataReader Method Map" %>
<%@ Map Name="SqlNativeSqlDb" Src="SqlNativeType-SqlDbType" Description="SqlNativeType to SqlDbType Map" %>
<%@ Map Name="DbTypeCSharp" Src="DbType-CSharp" Description="DbType to CSharp Map" %>
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Directory_Edit.aspx.cs" Inherits="CAF.Web.WebForm.Directory_Edit" %>
<%%@ Page Language="C#" AutoEventWireup="true" CodeBehind="<%=GetSingleClassName()%>_Query.aspx.cs" Inherits="<%= this.ClassNamespace %>.Web.WebForm.<%=GetSingleClassName()%>_Query" %%>
<%%@ Register TagPrefix="f" Namespace="<%= this.ClassNamespace %>.Web.WebForm.CAFControl" Assembly="<%= this.ClassNamespace %>.Web.WebForm" %%>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title></title>
</head>
<body>
    <form id="form1" runat="server">
    <f:PageManager  runat="server" ID="manager"  AutoSizePanelID="mainPanel"/>
    <f:CAFPanel runat="server" ID="mainPanel" Layout="Fit" >
        <Items>
            <f:CAFGrid ID="grid" runat="server" Title=""  SortField="CreatedDate" OnRowCommand="gridRowCommand" 
                 DataKeyNames="Id">
                <Toolbars>
                    <f:Toolbar ID="Toolbar1" runat="server" >
                        <Items >
                            <f:NewButton ID="btnNew"  runat="server"  />
                            <f:DeleteButton  ID="btnDelete" runat="server" OnClick="btnExcute_Click"/>
                            <f:ToolbarSeparator ID="ToolbarSeparator1" runat="server">
                            </f:ToolbarSeparator>
                            <f:ToolbarFill ID="ToolbarFill1" runat="server"/>
                        </Items>
                    </f:Toolbar>
                </Toolbars>
                <Columns>
                    <f:EditWindowField WindowID="winEdit"  DataTextFormatString="{0}" DataIFrameUrlFields="Id"
                    DataIFrameUrlFormatString="<%=GetSingleClassName()%>_Edit.aspx?Id={0}" DataWindowTitleField="Name"
                    DataWindowTitleFormatString="编辑 - {0}"  />
                <%if(SourceView==null){ %>
                        <% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
                        <%  ColumnSchema  column=SourceTable.NonPrimaryKeyColumns[i];%>                        
                        <% if(!IsSystemFiled(column)) {%>
                        <%if(ColumnIsDateTime(column)) {%>
                    <f:BoundField Width="140px" ColumnID="<%=column.Name%>" DataField="<%=column.Name%>" HeaderText="<%= GetDescription(column) %>" DataFormatString="{0:yyyy-MM-dd}"  SortField="<%=column.Name%>"></f:BoundField>
                        <%}else if(ColumnIsBool(column)){ %>
                    <f:CheckBoxField  Width="80px" ColumnID="<%=column.Name%>" DataField="<%=column.Name%>" RenderAsStaticField="true" HeaderText="<%= GetDescription(column) %>" SortField="<%=column.Name%>"></f:CheckBoxField >
                        <%}else{ %>
                    <f:BoundField Width="140px" ColumnID="<%=column.Name%>" DataField="<%=column.Name%>" HeaderText="<%= GetDescription(column) %>" SortField="<%=column.Name%>"></f:BoundField>
                        <%}}} %>
                        <%}else{ %>
                        <% for (int i = 0; i < SourceView.Columns.Count; i++) { %>
                        <%  ViewColumnSchema  column=SourceView.Columns[i];%>
                        <% if(!IsSystemFiled(column)) {%>
                        <%if(ColumnIsDateTime(column)) {%>
                    <f:BoundField Width="140px" ColumnID="<%=column.Name%>" DataField="<%=column.Name%>" HeaderText="<%= GetDescription(column) %>" DataFormatString="{0:yyyy-MM-dd}" SortField="<%=column.Name%>"></f:BoundField>
                        <%}else if(ColumnIsBool(column)){ %>
                    <f:CheckBoxField  Width="80px" ColumnID="<%=column.Name%>" DataField="<%=column.Name%>" RenderAsStaticField="true" HeaderText="<%= GetDescription(column) %>"></f:CheckBoxField >
                        <%}else{ %>
                    <f:BoundField Width="140px" ColumnID="<%=column.Name%>" DataField="<%=column.Name%>" HeaderText="<%= GetDescription(column) %>" SortField="<%=column.Name%>"></f:BoundField>
                        <%}}} %>
                <%} %>
                    <f:DeleteLinkButtonField  />
                </Columns>
                <PageItems>
                    <f:ToolbarSeparator ID="ToolbarSeparator2" runat="server">
                    </f:ToolbarSeparator>
                </PageItems>
            </f:CAFGrid>
        </Items>
    </f:CAFPanel>
    <f:CAFWindow ID="winEdit" Title="编辑"  runat="server"  Width="400px" Height="300px"/>
    </form>
</body>
</html>

<script runat="template">

public string GetClassName()
{
    if(SourceView==null)
    {
        var table=SourceTable;
        int pre = table.Name.IndexOf("_");
        if (table.Name.EndsWith("ies"))
    	{
    		return table.Name.Substring(pre+1, table.Name.Length - pre-4)+"y";
    	}
        else if (table.Name.EndsWith("ses"))
    	{
    		return table.Name.Substring(pre+1, table.Name.Length - pre-3);
    	}
    	else if (table.Name.EndsWith("s"))
    	{
    		return table.Name.Substring(pre+1, table.Name.Length - pre-2);
    	}
    	else
    	{
    		return table.Name.Substring(pre+1);
    	}
    }
    else
    {
        var table=SourceView;
        if (table.Name.EndsWith("ies"))
    	{
    		return  "ReadOnly"+(table.Name.Substring(0, table.Name.Length -3)+"y").Replace("V_","");
    	}
        	else if (table.Name.EndsWith("ses"))
    	{
    		return "ReadOnly"+table.Name.Substring(0, table.Name.Length - 2).Replace("V_","")+"List";
    	}
    	else if (table.Name.EndsWith("s"))
    	{
    		return "ReadOnly"+table.Name.Substring(0, table.Name.Length - 1).Replace("V_","")+"List";
    	}
    	else
    	{
    		return "ReadOnly"+table.Name.Replace("V_","")+"List";
    	} 
    }
}

public string GetSingleClassName()
{
    if(SourceView==null)
    {
        var table=SourceTable;
        int pre = table.Name.IndexOf("_");
        if (table.Name.EndsWith("ies"))
    	{
    		return table.Name.Substring(pre+1, table.Name.Length - pre-4)+"y";
    	}
        	else if (table.Name.EndsWith("ses"))
    	{
    		return table.Name.Substring(pre+1, table.Name.Length - pre-3);
    	}
    	else if (table.Name.EndsWith("s"))
    	{
    		return table.Name.Substring(pre+1, table.Name.Length - pre-2);
    	}
    	else
    	{
    		return table.Name.Substring(pre+1);
    	}
    }
    else
    {
        var table=SourceView;
        if (table.Name.EndsWith("ies"))
    	{
    		return  (table.Name.Substring(0, table.Name.Length -3)+"y").Replace("V_","");
    	}
        	else if (table.Name.EndsWith("ses"))
    	{
    		return table.Name.Substring(0, table.Name.Length - 2).Replace("V_","");
    	}
    	else if (table.Name.EndsWith("s"))
    	{
    		return table.Name.Substring(0, table.Name.Length - 1).Replace("V_","");
    	}
    	else
    	{
    		return table.Name.Replace("V_","");
    	} 
    }
}

private string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;
	
	if (propertyName == column.Table.Name + "Name") return "Name";
	if (propertyName == column.Table.Name + "Description") return "Description";
	
	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);
	
	return propertyName;
}

private bool IsSystemFiled(ColumnSchema column)
{
   string name= GetPropertyName(column);
    return name=="CreatedDate" || name=="ChangedDate" || name=="Status" ||name=="Note"||name=="Id";
}

private bool ColumnIsString(ColumnSchema column)
{
   string type= GetCSharpVariableType(column) ;
    return type=="string" ;
}

private bool ColumnIsGuid(ColumnSchema column)
{
   string type= GetCSharpVariableType(column) ;
    return type=="Guid" ;
}

private bool ColumnIsDateTime(ColumnSchema column)
{
   string type= GetCSharpVariableType(column) ;
    Debug.Write(type=="DateTime");
    return type=="DateTime" ;
}

private bool ColumnIsBool(ColumnSchema column)
{
   string type= GetCSharpVariableType(column) ;
    return type=="bool" ;
}

private bool ColumnIsNumber(ColumnSchema column)
{
   string type= GetCSharpVariableType(column) ;
    return type=="int" ||type=="double"||type=="decimal";
}

private string GetDescription(ColumnSchema column)
{
	string description = column.Description;
	
	if (description == "") return "";
	if (description == null) return "";	
	return description;
}

private string GetCSharpVariableType(ColumnSchema column)
{
    if (column.Name.EndsWith("TypeCode")) return column.Name;
    return DbTypeCSharp[column.DataType.ToString()];
}
//表单和视图分别对待

private string GetPropertyName(ViewColumnSchema column)
{
	string propertyName = column.Name;
	
	if (propertyName == column.View.Name + "Name") return "Name";
	if (propertyName == column.View.Name + "Description") return "Description";
	
	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);
	
	return propertyName;
}

private bool IsSystemFiled(ViewColumnSchema column)
{
   string name= GetPropertyName(column);
    return name=="CreatedDate" || name=="ChangedDate" || name=="Status" ||name=="Note"||name=="Id";
}

private bool ColumnIsString(ViewColumnSchema column)
{
   string type= GetCSharpVariableType(column) ;
    return type=="string" ;
}

private bool ColumnIsGuid(ViewColumnSchema column)
{
   string type= GetCSharpVariableType(column) ;
    return type=="Guid" ;
}

private bool ColumnIsDateTime(ViewColumnSchema column)
{
   string type= GetCSharpVariableType(column) ;
    Debug.Write(type=="DateTime");
    return type=="DateTime" ;
}

private bool ColumnIsBool(ViewColumnSchema column)
{
   string type= GetCSharpVariableType(column) ;
    return type=="bool" ;
}

private bool ColumnIsNumber(ViewColumnSchema column)
{
   string type= GetCSharpVariableType(column) ;
    return type=="int" ||type=="double"||type=="decimal";
}

private string GetDescription(ViewColumnSchema column)
{
	string description = column.Description;
	
	if (description == "") return "";
	if (description == null) return "";	
	return description;
}

private string GetCSharpVariableType(ViewColumnSchema column)
{
    if (column.Name.EndsWith("TypeCode")) return column.Name;
    return DbTypeCSharp[column.DataType.ToString()];
}
</script>
